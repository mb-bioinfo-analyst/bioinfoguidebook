---
title: "Mastering Conditional Logic in R"
subtitle: "Implement If-Else, Nested Logic & Vectorized Conditions"
author: "Bilal Mustafa"
date: "2023-09-07"
slug: "mastering-conditional-logic-r"
description: >
  A comprehensive tutorial on conditional programming in R. Learn how to use
  if-else statements, nested logic, switch functions, and vectorized operations
  to write clean, efficient code.

categories: [R, Programming, Conditional Statement]
tags: [Conditional Logic, If-Else, Nested If, Switch, Vectorized Operations]

image: "image.jpg"
image-alt: Thumbnail

twitter-card:
  title: "Conditional Logic in R: If-Else & Beyond"
  description: >
    Dive into if-else statements, nested conditions, and advanced logical
    operations for robust R programming.
  image: "image.jpg"
  image-alt: "Twitter card for conditional logic tutorial"

open-graph:
  title: "Mastering Conditional Logic in R"
  description: >
    Explore comprehensive examples of conditional structures—from simple if-else
    to complex vectorized logic—in R.
  image: "image.jpg"
  image-alt: "Open Graph image for R conditional logic guide"

format:
  html:
    code-link: true
    df-print: paged
    code-copy: true
---



## Introduction:

Conditional logic is a fundamental concept in programming, allowing you to make decisions and control the flow of your code based on specific conditions.
In R, the if-else statement is a powerful tool for implementing conditional logic.
In this blog post, we will explore the various variations and techniques for using if-else statements in R to help you become a proficient R programmer.

------------------------------------------------------------------------

### Basic If-Else Statements

The basic if-else statement in R allows you to execute different blocks of code depending on whether a specified condition is true or false.
Here's the basic syntax:

> if (condition) {\
> \# Code to execute if the condition is TRUE\
> } else {\
> \# Code to execute if the condition is FALSE\
> }

Let's look at an example:

```{r}
x <- 10

if (x > 5) {
  print("x is greater than 5")
} else {
  print("x is less than or equal to 5")
}
```

In this example, the if-else statement checks if x is greater than 5 and prints the appropriate message based on the condition.

------------------------------------------------------------------------

### Multiple Conditions with else if

Sometimes, you need to evaluate multiple conditions in a sequence.
You can use the else if construct to handle such cases.
Here's how it works:

> if (condition1) {\
> \# Code to execute if condition1 is TRUE\
> } else if (condition2) {\
> \# Code to execute if condition2 is TRUE\
> } else {\
> \# Code to execute if no conditions are TRUE\
> }

Let's see an example:

```{r}
grade <- 75

if (grade >= 90) {
  print("A")
} else if (grade >= 80) {
  print("B")
} else if (grade >= 70) {
  print("C")
} else {
  print("F")
}
```

In this case, the code determines a student's grade based on their score.

------------------------------------------------------------------------

### Ternary Operator

R also supports a concise way of using if-else statements known as the ternary operator.
It's useful when you need to assign a value based on a condition.
The syntax is as follows:

> variable \<- if (condition) value_if_true else value_if_false

Here's an example:

```{r}
x <- 8

grade <- if (x > 5) {
  "Pass"
} else {
  "Fail"
}

print(grade)

# Or as a one liner
# grade <- if (x > 5) "Pass" else "Fail"

```

The ternary operator assigns the value "Pass" to the grade variable if x is greater than 5 and "Fail" otherwise.

------------------------------------------------------------------------

### Vectorized If-Else Statements

In R, you can apply if-else statements to vectors or data frames for efficient and concise code.
Here's an example of vectorized if-else:

```{r}
scores <- c(85, 92, 78, 60, 95)
grades <-
  ifelse(scores >= 90, "A", ifelse(scores >= 80, "B", ifelse(scores >= 70, "C", "F")))

print(grades)
```

In this example, we assign grades to a vector of scores using nested ifelse statements.

------------------------------------------------------------------------

### Conclusion on Basic Conditional Statements

Conditional logic is a crucial aspect of programming, and mastering if-else statements in R is essential for writing robust and flexible code.
In this blog post, we explored the basics of if-else statements, handling multiple conditions with else if, using the ternary operator for concise assignments, and applying vectorized if-else statements.
With these techniques at your disposal, you can make informed decisions and control the flow of your R programs effectively.

------------------------------------------------------------------------

## Advanced Conditional Statements in R

In addition to the basic if-else statements and the variations mentioned above, there are more advanced conditional statements and techniques you can use in R.
These advanced conditional statements can help you write more complex and expressive code.
Here are some advanced conditional techniques in R:

------------------------------------------------------------------------

## Switch Statement

The switch statement allows you to select one of several code blocks to execute based on the value of an expression.
It's particularly useful when you have multiple cases to handle.
Here's an example:

```{r}
day <- "Monday"

result <- switch(
  day,
  "Monday" = "It's the start of the week!",
  "Friday" = "It's almost the weekend!",
  "Saturday" = "It's the weekend!",
  "Default message"
)

print(result)
```

In this example, the switch statement assigns a message based on the value of the day variable.

------------------------------------------------------------------------

## The ifelse Function

The ifelse function is a vectorized version of the if-else statement, and it's handy when you want to apply a condition to an entire vector.
Here's an example:

```{r}
vector <- c(5, 10, 15, 20)
result <-
  ifelse(vector > 10, "Greater than 10", "Less than or equal to 10")

print(result)
```

The ifelse function applies the condition to each element in the vector.

------------------------------------------------------------------------

## Using dplyr::case_when

In data manipulation tasks, you often need to create new variables based on complex conditions.
The case_when function from the dplyr package is perfect for this purpose.
It allows you to specify multiple conditions and their corresponding values concisely.
Here's an example:

```{r}

library(dplyr)

data <- data.frame(grade = c(85, 92, 78, 60, 95))

data <- data %>%
  mutate(grade_category = case_when(grade >= 90 ~ "A",
                                    grade >= 80 ~ "B",
                                    grade >= 70 ~ "C",
                                    TRUE ~ "F"))

print(data)
```

In this example, case_when assigns a grade category based on the values in the "grade" column.

------------------------------------------------------------------------

## Custom Functions

In more advanced scenarios, you may need to create custom functions that use complex conditional logic.
This allows you to encapsulate your logic and make your code more modular and reusable.
Here's a simplified example:

```{r}
calculate_discount <- function(age, is_student) {
  if (age < 18) {
    return(0.2)  # 20% discount for minors
  } else if (age >= 18 && is_student) {
    return(0.1)  # 10% discount for students 18+
  } else {
    return(0)    # No discount for others
  }
}

discount <- calculate_discount(20, TRUE)
print(paste("Discount percentage:", discount * 100, "%"))
```

In this example, we've created a custom function calculate_discount that calculates discounts based on age and student status.

These advanced conditional techniques in R offer flexibility and expressiveness, allowing you to handle complex decision-making scenarios in your code efficiently.
Depending on your specific use case, you can choose the most appropriate approach to implement conditional logic in your R programs.

------------------------------------------------------------------------

> > Nested if-else statements can be used when you need to evaluate multiple conditions in a hierarchical or nested manner.
> > Here's how to work with 2 and 3 level nested if-else statements, along with alternative ways to handle complex scenarios in R.

------------------------------------------------------------------------

## Handling 2-Level Nested If-Else Statements

Nested if-else statements involve using an if-else construct within another if-else block.
This allows you to handle multiple conditions with varying levels of priority.
Here's an example of a 2-level nested if-else statement:

```{r}
x <- 25
y <- 10

if (x > y) {
  if (x > 20) {
    print("x is greater than y and greater than 20")
  } else {
    print("x is greater than y but not greater than 20")
  }
} else {
  print("x is not greater than y")
}
```

In this example, the outer if-else block checks if x is greater than y, and if it is, it enters the inner if-else block to check if x is greater than 20.

------------------------------------------------------------------------

## Handling 3-Level Nested If-Else Statements

For even more complex scenarios, you can have 3-level nested if-else statements by adding another layer of conditional logic within the innermost block:

```{r}
x <- 25
y <- 10
z <- 30

if (x > y) {
  if (x > 20) {
    if (z > 25) {
      print("x is greater than y, greater than 20, and z is greater than 25")
    } else {
      print("x is greater than y, greater than 20, but z is not greater than 25")
    }
  } else {
    print("x is greater than y but not greater than 20")
  }
} else {
  print("x is not greater than y")
}
```

In this example, we've added an additional condition involving the variable z within the innermost if-else block.

------------------------------------------------------------------------

## Alternative Approaches

While nested if-else statements are useful for handling complex logic, they can become unwieldy and hard to read when you have many conditions.
Here are some alternative approaches to handling complex scenarios:

-   Switch Statements: We discussed the switch statement earlier.
    It can be a cleaner way to handle multiple conditions, especially when you have many cases to consider.

-   Lookup Tables: You can create lookup tables or data frames that map conditions to outcomes.
    This approach can be more readable and maintainable for complex scenarios.

-   Custom Functions: As mentioned previously, you can encapsulate complex conditional logic within custom functions, making your code more modular and easier to understand.

-   Vectorized Operations: In data manipulation tasks, consider using vectorized operations and functions like ifelse, case_when from the dplyr package, and other functions from the tidyverse ecosystem to handle complex conditions within data frames efficiently.

Remember that the choice of approach depends on the specific requirements of your problem and the maintainability of your code.
In some cases, using alternative techniques may lead to more concise and readable code, especially when dealing with multi-level nested conditions.

------------------------------------------------------------------------

visit the post [Data Wrangling](../../posts/DataWrangling_R/datawrangle.html)
